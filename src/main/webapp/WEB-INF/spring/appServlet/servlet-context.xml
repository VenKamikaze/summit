<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
	                    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		                http://www.springframework.org/schema/beans 
		                http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		                http://www.springframework.org/schema/context 
		                http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="org.epicgamer.kamikaze" />

  <!-- selects a static view for rendering without the need for an explicit controller -->
  <view-controller path="/login"/>
  <view-controller path="/" view-name="index"/>
  <view-controller path="/dataAccessFailure"/>
  <view-controller path="/resourceNotFound"/>
  <view-controller path="/uncaughtException"/>
	
  <!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views. 
       The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container: 
       this will happen - here with all other types of exceptions. -->
  <beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
    <beans:property name="exceptionMappings">
      <beans:props>
        <beans:prop key=".DataAccessException">dataAccessFailure</beans:prop>
        <beans:prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</beans:prop>
        <beans:prop key=".TypeMismatchException">resourceNotFound</beans:prop>
        <beans:prop key=".MissingServletRequestParameterException">resourceNotFound</beans:prop>
      </beans:props>
    </beans:property>
  </beans:bean>
	
<!-- Example for setting up a scheduled task -->
<!--
<task:scheduler id="scheduler" pool-size="1" />

<task:scheduled-tasks scheduler="scheduler" >
    <task:scheduled ref="updateDataBatchJob" method="run" fixed-delay="3600" />
</task:scheduled-tasks>

<bean id="updateDataBatchJob" class="org.epicgamer.kamikaze.summit.job.updateDataBatchJob"></bean>
-->
	
</beans:beans>
