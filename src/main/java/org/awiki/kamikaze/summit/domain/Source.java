package org.awiki.kamikaze.summit.domain;
// Generated Oct 31, 2013 9:11:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;

/**
 * Field generated by hbm2java
 */
@Entity
@Table(name = "SOURCE")
public class Source implements java.io.Serializable
{
  private static final long serialVersionUID = -7419252566793513396L;
  
  private long                      id;
  private String                    source;
  private Set<Region>               regions = new HashSet<Region>(0);
  private Set<Field>                fields = new HashSet<Field>(0);
  private Set<PageProcessingSource> pageProcessingSource = new HashSet<PageProcessingSource>(0);
  
  private Conditional               conditional = null;
  private SourceMetadata            sourceMetadata = null;
  // do we need a field that specifies the order to execute the source in (e.g. if you have a many Source attached to one field?)
  
  public Source()
  {
  }

  public Source(long id, String  source)
  {
    this.id = id;
    this.source = source;
  }

  public Source(long id, String source, Set<Region> regions, Set<Field> fields)
  {
    this(id,source);
    this.regions = regions;
    this.fields = fields;
  }

  @Id
  @Column(name = "ID", unique = true, nullable = false)
  public long getId()
  {
    return this.id;
  }

  public void setId(long id)
  {
    this.id = id;
  }

  //@Lob
  @Column(name = "SOURCE", nullable = false)
  //@Type(type="org.hibernate.type.MaterializedClobType")
  public String  getSource()
  {
    return this.source;
  }

  public void setSource( String source)
  {
    this.source = source;
  }
  
  
  @ManyToMany(mappedBy="source")
  public Set<Region> getRegions()
  {
    return regions;
  }

  public void setRegions(Set<Region> regions)
  {
    this.regions = regions;
  }
  
  
  @ManyToMany(mappedBy="source")
  public Set<Field> getFields()
  {
    return fields;
  }

  public void setFields(Set<Field> fields)
  {
    this.fields = fields;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy="source")
  public Set<PageProcessingSource> getPageProcessingSource()
  {
    return pageProcessingSource;
  }

  public void setPageProcessingSource(Set<PageProcessingSource> pageProcessingSource)
  {
    this.pageProcessingSource = pageProcessingSource;
  }
  
  @OneToOne(mappedBy = "source", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
  public Conditional getConditional()
  {
    return conditional;
  }

  public void setConditional(Conditional conditional)
  {
    this.conditional = conditional;
  }

  @OneToOne(mappedBy = "source", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
  public SourceMetadata getSourceMetadata()
  {
    return sourceMetadata;
  }

  public void setSourceMetadata(SourceMetadata sourceMetadata)
  {
    this.sourceMetadata = sourceMetadata;
  }
  
}
