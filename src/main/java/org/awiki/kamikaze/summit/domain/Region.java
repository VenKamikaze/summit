package org.awiki.kamikaze.summit.domain;
// Generated Oct 31, 2013 9:11:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.awiki.kamikaze.summit.domain.codetable.CodeRegionPosition;
import org.awiki.kamikaze.summit.domain.codetable.CodeRegionType;
import org.awiki.kamikaze.summit.domain.codetable.CodeSourceType;

/**
 * Region generated by hbm2java
 */
@Entity
@Table(name = "region", schema = "public")
public class Region implements java.io.Serializable
{

  /**
   * 
   */
  private static final long serialVersionUID = -4342338136016395303L;
  
  
  private long                id;
  private CodeRegionPosition codeRegionPosition;
  private CodeRegionType     codeRegionType;
  private CodeSourceType     codeSourceType;  //probably not necessary. in future map regionType to a codeRegionType DTO
                                              //and get the region source type from there. TODO
  private String             name;
  
  private Set<Source>        source;
  
  private Set<PageRegion>    pageRegions  = new HashSet<PageRegion>(0);
  private Set<RegionField>   regionFields = new HashSet<RegionField>(0);
  private Template           template;
  

  public Region()
  {
  }

  public Region(long id, String name)
  {
    this.id = id;
    this.name = name;
  }

  public Region(long id, CodeRegionPosition codeRegionPosition,
      CodeRegionType codeRegionType, String name, final Set<Source> source, Set<PageRegion> pageRegions,
      Set<RegionField> regionFields)
  {
    this.id = id;
    this.codeRegionPosition = codeRegionPosition;
    this.codeRegionType = codeRegionType;
    this.name = name;
    this.source = source;
    this.pageRegions = pageRegions;
    this.regionFields = regionFields;
  }

  @Id
  @Column(name = "id", unique = true, nullable = false)
  public long getId()
  {
    return this.id;
  }

  public void setId(long id)
  {
    this.id = id;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "code_region_position")
  public CodeRegionPosition getCodeRegionPosition()
  {
    return this.codeRegionPosition;
  }

  public void setCodeRegionPosition(CodeRegionPosition codeRegionPosition)
  {
    this.codeRegionPosition = codeRegionPosition;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "code_region_type")
  public CodeRegionType getCodeRegionType()
  {
    return this.codeRegionType;
  }

  public void setCodeRegionType(CodeRegionType codeRegionType)
  {
    this.codeRegionType = codeRegionType;
  }

  @Column(name = "name", nullable = false, length = 1000)
  public String getName()
  {
    return this.name;
  }

  public void setName(String name)
  {
    this.name = name;
  }

  @ManyToMany
  @JoinTable(name="REGION_SOURCE",
          joinColumns = { @JoinColumn(name="REGION_ID", referencedColumnName="ID") },
          inverseJoinColumns = { @JoinColumn(name="SOURCE_ID", referencedColumnName="ID") })
  public Set<Source> getSource() {
    return source;
  }

  public void setSource(Set<Source> source) {
    this.source = source;
  }

  
  @OneToMany(fetch = FetchType.LAZY, mappedBy = "region")
  public Set<PageRegion> getPageRegions()
  {
    return this.pageRegions;
  }

  public void setPageRegions(Set<PageRegion> pageRegions)
  {
    this.pageRegions = pageRegions;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "region")
  public Set<RegionField> getRegionFields()
  {
    return this.regionFields;
  }

  public void setRegionFields(Set<RegionField> regionFields)
  {
    this.regionFields = regionFields;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "source_type_code")
  public CodeSourceType getCodeSourceType()
  {
    return codeSourceType;
  }

  public void setCodeSourceType(CodeSourceType codeSourceType)
  {
    this.codeSourceType = codeSourceType;
  }
  
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "template_id", nullable = false)
  public Template getTemplate() {
    return template;
  }

  public void setTemplate(Template template) {
    this.template = template;
  }


}
