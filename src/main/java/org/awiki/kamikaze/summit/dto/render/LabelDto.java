package org.awiki.kamikaze.summit.dto.render;
// Generated Oct 31, 2013 9:11:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import jakarta.validation.constraints.Size;

import org.apache.commons.lang3.StringUtils;
import org.awiki.kamikaze.summit.domain.codetable.CodeLabelType;
import org.awiki.kamikaze.summit.service.formatter.FormatEnums;
import jakarta.validation.constraints.NotBlank;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Field generated by hbm2java
 */
public class LabelDto implements PageItem<String>
{
  public static final String LABEL_NAME_POSTFIX = "_label";
  public static final String LABEL_FOR = "for";
  
  public static final String LABEL_CLASS_MANDATORY = "label_mandatory";
  public static final String LABEL_CLASS_OPTIONAL = "label_optional";
  public static final String LABEL_CLASS_GENERIC= "label_generic";
  
  private Long                      id;
  private String                    text;
  
  @NotBlank(message = "Must not be empty.")
  @Size(max = 10)
  private String                    codeLabelType;
  
  private String                    notes;  
  
  private FieldDto                  linkedField = null;
  private ConditionalDto            conditional = new ConditionalDto();
  
  @JsonIgnore
  private TemplateDto               template;
  
  public LabelDto()
  {
  }

  public LabelDto(long id, String  text)
  {
    this.id = id;
    this.text = text;
  }
  
  public LabelDto(long id, String  text, FieldDto linkedField)
  {
    this.id = id;
    this.text = text;
    this.linkedField = linkedField;
  }

  public Long getId()
  {
    return this.id;
  }

  public void setId(Long id)
  {
    this.id = id;
  }

  public String  getText()
  {
    return this.text;
  }

  public void setText( String text)
  {
    this.text = text;
  }
  
  public FieldDto  getField()
  {
    return this.linkedField;
  }

  public void setField(FieldDto linkedField)
  {
    this.linkedField = linkedField;
  }
    

  public String  getNotes()
  {
    return this.notes;
  }

  public void setNotes( String notes)
  {
    this.notes = notes;
  }

  public String getCodeLabelType()
  {
    return this.codeLabelType;
  }

  public void setCodeLabelType(String codeFieldType)
  {
    this.codeLabelType = codeFieldType;
  }
  
  public ConditionalDto getConditional()
  {
    return conditional;
  }

  public void setConditional(ConditionalDto conditional)
  {
    this.conditional = conditional;
  }
  
  @Override
  public boolean hasChildPageItems()
  {
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override
  public List<PageItem<String>> getChildPageItems()
  {
    return Collections.EMPTY_LIST;
  }
  public TemplateDto getTemplate()
  {
    return template;
  }
  public void setTemplate(TemplateDto template)
  {
    this.template = template;
  }

  @Override
  public TemplateDto getTemplateDto()
  {
    return getTemplate();
  }

  @Override
  public Map<String, String> getCustomReplacementVariables()
  {
    Map<String, String> replacementVars = new TreeMap<>();
    replacementVars.put(FormatEnums.REPLACEMENT_LABEL_CLASS_VARIABLE.toString(), getLabelClass());
    replacementVars.put(FormatEnums.REPLACEMENT_LABEL_FOR_VARIABLE.toString(), getLabelFor());
    return replacementVars;
  }

  // TODO consider changing this to a column on LABEL
  public FormatEnums getLabelPositionVariable() {
    if (getCodeLabelType().contains(CodeLabelType.IS_LEFT_PREFIX))
    {
      return FormatEnums.REPLACEMENT_LABEL_LEFT_ID_VARIABLE;
    }
    else if (getCodeLabelType().contains(CodeLabelType.IS_RIGHT_PREFIX))
    {
      return FormatEnums.REPLACEMENT_LABEL_RIGHT_ID_VARIABLE;
    }
    return null;
  }
  
  // TODO consider changing this to a column on LABEL
  public String getLabelClass() {
    if(getCodeLabelType().contains(CodeLabelType.PARTIAL_MANDATORY_CODE)) {
      return LABEL_CLASS_MANDATORY;
    }
    else if(getCodeLabelType().contains(CodeLabelType.PARTIAL_OPTIONAL_CODE)) {
      return LABEL_CLASS_OPTIONAL;
    }
    return LABEL_CLASS_GENERIC;
  }
  
  public String getLabelFor() {
    if(linkedField != null) {
      StringBuilder labelFor = new StringBuilder(45);
      labelFor.append(LABEL_FOR).append("=\"");
      labelFor.append(linkedField.getId().toString());
      labelFor.append("\"");
      return labelFor.toString();
    }
    return StringUtils.EMPTY;
  }
  
  @Override
  public String getName()
  {
    if(linkedField != null) {
      return linkedField.getName() + LABEL_NAME_POSTFIX;
    }
    return getId() + LABEL_NAME_POSTFIX;
  }

  @Override
  public String getProcessedSource()
  {
    return getText();
  }

}
