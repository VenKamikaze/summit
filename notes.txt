TODO: 
* Pagination is hacky when using Oracle - it needs an 'order by' specified on the innermost subquery, however we don't know what columns are unique at this stage. When allowing edit capability, we might need to prompt users to specify the column with the primary key (or a unique constraint at least). Warn users if they choose to continue without specifying that as rows may be returned in random order. (Jul 2017)

Replacement variables for e.g. current region/page/app id, so we can reference them within the templates.
Need to be able to then use these variables in place of e.g. the region id for a report region, so we can have multiple report regions working with the mustache templating on one page.



-------------------- Old notes from pre-December 2016 -----------------------

* Render:

* Picks up wanted page by ${applicationId}/${pageId}
* Controller hands off to PageService
* PageService pulls in:
** Page Domain, linked domain objects such as Regions, RegionField, Fields.
** Linked templates

* First pass in rendering then grabs the template and puts it into an object that is manipulated.
* A pass is then done on the Fields, executing any SQL to bring in values.
* A pass is then done on Regions, inserting the post processed Fields into the Regions
* A pass is then done on the template, inserting regions into appropriate areas
* Full page is then returned to the client requesting it.


Passes should be done in the above order, to stop people inserting textual values that look like replacement region strings and them being replaced by the parser.


* Reports?
** Summit developer enters in a query
** Query should be run when saved to pull out resulting columns
** Manipulation of column names can be handled by the summit developer at SQL level, saves us needing to manipulate the columns etc after query has been produced
** Standard page produced with table containing results.
** Down the track we can look at adding virtual columns etc

Due to design, reports should be handled by the same process as standard page render. The only difference is the type of Region selected... this implies the region render service will need to have some conditional logic when a 'report type' vs a 'form type' region is selected.
